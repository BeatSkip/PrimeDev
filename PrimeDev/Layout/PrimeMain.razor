@inherits LayoutComponentBase

@inject IDialogService DialogService
@inject PrimeManager manager
@inject PrimeFileService primefiles
@inject ISnackbar Snackbar

<MudThemeProvider Theme="mytheme" />
<MudDialogProvider />
<MudSnackbarProvider />

<PrimeMainLayout StatusText="Disconnected...">
	<Menu>
		<MudTabs Elevation="1" Rounded="false" Centered="true" Outlined="true">
			<MudTabPanel Class="dense-tabs" Icon="@Icons.Material.Filled.Cable" Text="USB" />
			<MudTabPanel Class="dense-tabs" Icon="@Icons.Material.Filled.Apps" Text="Apps"/>
			<MudTabPanel Class="dense-tabs" Icon="@Icons.Material.Filled.Note" Text="Notes"/>
			<MudTabPanel Class="dense-tabs" Icon="@Icons.Material.Filled.Settings" Text="Settings" />
		</MudTabs>
	</Menu>


	<MainPanel>
		
	</MainPanel>
</PrimeMainLayout>

@code {

	MudTheme mytheme = new MudTheme()
		{
			Palette = new Palette()
			{
				Primary = Colors.Blue.Darken1,
				PrimaryDarken = Colors.Blue.Darken3,
				PrimaryLighten = Colors.Blue.Lighten1,
				Secondary = Colors.DeepOrange.Darken1,
				SecondaryDarken = Colors.DeepOrange.Darken2,
				SecondaryLighten = Colors.DeepOrange.Default,
				AppbarBackground = Colors.Blue.Darken1,

			}
		};

	private PrimeCalculator prime;

	public bool drawerOpen { get; set; } = false;

	void DrawerToggle()
	{
		if (manager.IsInitialized)
			drawerOpen = !drawerOpen;


	}

	private List<PrimeCalculator> calcs = new List<PrimeCalculator>();

	public async Task Initialize()
	{
		var success = await manager.InitializeAsync();
		if (success)
		{
			prime = manager.GetCalculator();
			prime.Changed += Prime_Changed;
			await prime.Initialize();
			var options = new DialogOptions { CloseButton = true };
			primefiles.RegisterCalculator(prime);
			primefiles.AppsChanged += Prime_Changed;
			prime.Connected += Prime_connected;
			prime.BackupReceived += Prime_Received_backup;


		}
	}

	void Prime_connected(object? sender, EventArgs e)
	{
		Snackbar.Add("Connection successful!", Severity.Success, config => { config.ShowCloseIcon = true; config.VisibleStateDuration = 2000; });
	}

	void Prime_Received_backup(object? sender, BackupReceivedEventArgs e)
	{
		Snackbar.Add("Received Backup data", Severity.Info, config => { config.ShowCloseIcon = true; config.VisibleStateDuration = 2000; });
	}

	void Prime_Changed(object? sender, EventArgs e)
	{
		//Snackbar.Add("Re", Severity.Info, config => { config.ShowCloseIcon = true; config.VisibleStateDuration = 1000; });
		//Console.WriteLine("!##@@# - reveived prime app!!!");
		StateHasChanged();
	}
}