@inject IDialogService DialogService

@inject PrimeManager manager
@inject PrimeFileService primefiles
@inject MainPanelService panelservice
@inject PrimePythonIdeService pyserverice

<MudGrid>
	<MudToolBar Class="mud-elevation-2" Style="width: 100%; margin-top: 8px;">
		<MudIconButton OnClick="ExitIDE" Icon="@Icons.Material.Outlined.ArrowBack" Color="Color.Inherit" Class="mr-5" />
		<MudSpacer />
		<MudTooltip Text="Save files to Calculator">
			<MudIconButton OnClick="SaveAllFiles" Icon="@Icons.Material.Filled.Upgrade" Color="Color.Inherit" Class="mr-5" />
		</MudTooltip>
		<MudTooltip Text="Undo all edits">
			<MudIconButton OnClick="UndoAllEdits" Icon="@Icons.Material.Filled.Undo" Color="Color.Inherit" Class="mr-5" />
		</MudTooltip>
	</MudToolBar>



	<MudList Dense="true" Style="width: 100%; padding: 1rem;">
		<MudList Dense="false" Style="width: 100%;">
			<MudListItem Text="@("Files:")" />
			<MudDivider />
		</MudList>
		<MudList Clickable="true" Dense="true" @bind-SelectedItem="selectedItem" @bind-SelectedValue="@SelectedValue" DisableGutters="false" Style="width: 100%; padding-top: 0.1rem;">



			@foreach (var file in pyserverice.AppFiles)
			{
				<MudListItem Text="@(file.Key)" OnClick="(() => SelectFile(file.Key))" Icon="@(getFileIcon(file.Key))" IconColor="file.Value.unsavededit ? Color.Warning : Color.Default" Value="@(file.Key)" Class="@(file.Key == SelectedValue.ToString() ? "mud-selected-item narrow-icons" : "narrow-icons")" />
			}

		</MudList>
		<MudList Dense="false" Clickable="true" Style="width: 100%;">
			<MudDivider />
			<MudListItem Icon="@Icons.Filled.Add" AdornmentColor="Color.Success" Text="@("Add new File")" Class="narrow-icons" OnClick="CreateNewFile" />
			<MudListItem Icon="@Icons.Filled.Delete" AdornmentColor="Color.Warning" Text="@($"Delete   '{SelectedValue}'")" Class="narrow-icons" OnClick="DeleteFile" />

			<MudDivider />
		</MudList>
		<MudList Dense="true" Style="width: 100%;">
			<MudListItem Text="@("Variables")" Style="padding-top: 1rem;" />
			<MudList Dense="true" Style="width: 100%;">
			</MudList>
		</MudList>
	</MudList>

</MudGrid>

@code {
	//OnClick="(async () => await DeleteSelectedFile())
	//OnClick="(async () => await CreateNewFile())"
	private bool appselected = false;

	public object SelectedValue { get; set; }

	MudListItem selectedItem;


	#region File Management

	async Task SaveAllFiles()
	{
		await pyserverice.SaveAppToCalculator();
	}

	async Task UndoAllEdits()
	{

	}

	async Task CreateNewFile()
	{
		var result = await DialogService.Show<CreateFileDialog>("Create new file:").Result;

		if (!result.Cancelled)
		{
			string newfile = (string)(result.Data ?? "");

			if (newfile.Length > 2)
			{
				pyserverice.AddNewFile(newfile);
			}
		}
	}

	private async Task DeleteFile()
	{
		bool? result = await DialogService.ShowMessageBox(
			"Warning",
			"Deleting can not be undone!",
			yesText: "Delete!", cancelText: "Cancel");

		if (result == null ? false : true)
		{
			pyserverice.DeleteFile((string)SelectedValue);
		}

		StateHasChanged();
	}


	private void FileHasBeenEdited()
	{
		StateHasChanged();
	}

	#endregion

	private void AppSelected()
	{
		appselected = true;
		StateHasChanged();
		Console.WriteLine("App Selected to edit: " + pyserverice.CurrentApp.Name + " - Files: " + pyserverice.CurrentApp.Files.Count);
		SelectFile(pyserverice.AppFiles.FirstOrDefault().Key);
	}

	async void SelectFile(string Filename)
	{
		SelectedValue = Filename;
		pyserverice.SelectFileToEdit(Filename);
		StateHasChanged();
	}

	[Parameter]
	public EventCallback OnIdeExited { get; set; }

	protected async void ExitIDE()
	{
		appselected = false;
		await OnIdeExited.InvokeAsync();
	}

	#region internal features






	protected override void OnInitialized()
	{
		pyserverice.AppSelectedToEdit += AppSelected;
		pyserverice.FileHasBeenEdited += FileHasBeenEdited;
		manager.OnChange += ManagerChanged;
		AppSelected();
	}



	private void ManagerChanged()
	{

		StateHasChanged();
	}

	public void Dispose()
	{
		pyserverice.FileHasBeenEdited -= FileHasBeenEdited;
		pyserverice.AppSelectedToEdit -= AppSelected;
		manager.OnChange -= ManagerChanged;
	}

	async void Prime_Connected(object? sender, EventArgs e)
	{

	}

	string getFileIcon(string filename)
	{
		if (filename.EndsWith(".png"))
			return Icons.Custom.FileFormats.FileImage;

		return Icons.Custom.FileFormats.FileDocument;
	}
	#endregion


}
