@inherits LayoutComponentBase

@inject IDialogService DialogService
@inject PrimeManager manager
@inject PrimeFileService primefiles
@inject ISnackbar Snackbar

<MudThemeProvider Theme="mytheme"/>
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        @if (manager.IsInitialized)
        {
            <MudText Typo="Typo.h5" Color="Color.Primary">PrimeDev</MudText>
            <MudSpacer />
         <MudText Typo="Typo.overline" Align="Align.Center">@prime.ProductName - @prime.DeviceInfo.Version</MudText>
         <MudSpacer />
         <MudText Typo="Typo.overline" Align="Align.Center">@prime.DeviceInfo.Serial</MudText>
         
        }
        @if (!manager.IsInitialized)
        {
            <MudSpacer />
            <MudChip Icon="@Icons.Material.Filled.PrivateConnectivity" Color="Color.Secondary" OnClick="Initialize">Connect to Prime!</MudChip>
            <MudSpacer />
        }
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Variant="@DrawerVariant.Persistent" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">PrimeDev</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" >
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>


@code {

    MudTheme mytheme = new MudTheme()
    {
        Palette = new Palette()
        {
            Primary = Colors.Blue.Darken1,
            PrimaryDarken = Colors.Blue.Darken3,
            PrimaryLighten = Colors.Blue.Lighten1,
            Secondary = Colors.DeepOrange.Darken1,
            SecondaryDarken = Colors.DeepOrange.Darken2,
            SecondaryLighten = Colors.DeepOrange.Default,
            AppbarBackground = Colors.Blue.Darken1,

        }
    };

    private PrimeCalculator prime;

    bool _drawerOpen = false;

    void DrawerToggle()
    {
        if(manager.IsInitialized)
            _drawerOpen = !_drawerOpen;
    }

    private List<PrimeCalculator> calcs = new List<PrimeCalculator>();

    public async Task Initialize()
    {
        var success = await manager.InitializeAsync();
        if (success)
        {
            prime = manager.GetCalculator();
            prime.Changed += Prime_Changed;
            await prime.Initialize();
            var options = new DialogOptions { CloseButton = true };
            primefiles.RegisterCalculator(prime);
            primefiles.AppsChanged += Prime_Changed;
            prime.Connected += Prime_connected;
            prime.BackupReceived += Prime_Received_backup;


        }
    }

    void Prime_connected(object? sender, EventArgs e)
    {
        Snackbar.Add("Connection successful!", Severity.Success, config => { config.ShowCloseIcon = true; config.VisibleStateDuration = 2000; });
    }

    void Prime_Received_backup(object? sender, BackupReceivedEventArgs e)
	{
        Snackbar.Add("Received Backup data", Severity.Info, config => { config.ShowCloseIcon = true; config.VisibleStateDuration = 2000; });
	}

    void Prime_Changed(object? sender, EventArgs e)
	{
        //Snackbar.Add("Re", Severity.Info, config => { config.ShowCloseIcon = true; config.VisibleStateDuration = 1000; });
        //Console.WriteLine("!##@@# - reveived prime app!!!");
        StateHasChanged();
	}
}