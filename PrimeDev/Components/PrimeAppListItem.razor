@inject IJSRuntime js

<MudItem xs="@(Expanded ? 6 : 3)">

	<MudPaper Elevation="@(isElevated ? 3 : 0)" Outlined="@(Expanded ? true : false)" Width="100%" Class="@((Expanded ? "mx-2 my-0" : "mx-1 my-0"))" Style="background-color: transparent; height: 100%; padding: 0.25rem 0 rem;" @onmouseenter="MouseEntered" @onmouseleave="MouseLeft" onclick="@OnClickHandler">

		@if (!ShowContent)
		{
			<div class="d-flex flex-column align-center justify-center mud-width-full">
				<MudIcon Icon="@App.SvgIcon" ViewBox="0 0 80 80" Style="font-size: 3.5rem;margin:4px;" Size="Size.Large" />
				<MudText Typo="Typo.body2" Align="Align.Center">@App.Name</MudText>
			</div>
		}
		else
		{
			<div class="d-flex flex-grow-1 justify-space-between gap-2">
				<div class="d-flex flex-column align-center justify-center mud-width-full" style="width:95px;margin-left:1rem; margin-right:1rem;">
					<MudIcon Icon="@App.SvgIcon" ViewBox="0 0 80 80" Style="font-size: 3.5rem;margin:4px;" Size="Size.Large" />
					<MudText Typo="Typo.body2" Align="Align.Center">@App.Name</MudText>
				</div>

				<MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" VerticalAlign="true" Style="object-position: right; margin-top:-1px;margin-right:-1px; margin-bottom:-1px;">
					<MudButton id="custom-app-btns-t">Info</MudButton>
					<div class="d-flex" style="width:100%;">
						<MudButton id="custom-app-btns-m" EndIcon="@(toolsopen ? Icons.Filled.KeyboardArrowUp :Icons.Filled.KeyboardArrowDown)" Color="Color.Primary" OnClick="@ToggleTools">Tools</MudButton>
						<MudPopover Open="@toolsopen" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
							<MudList Clickable="true">
								<MudListItem  OnClick="@(() => ToolingHandler(("Python IDE")))">Python IDE</MudListItem>
								<MudListItem  OnClick="@(() => ToolingHandler(("PPL IDE")))">PPL IDE</MudListItem>
								<MudListItem  OnClick="@(() => ToolingHandler(("Parameters")))">Parameters</MudListItem>
								<MudListItem  OnClick="@(() => ToolingHandler(("Files")))">Files</MudListItem>
							</MudList>
						</MudPopover>
					</div>
					<MudButton id="custom-app-btns-b" OnClick="DeleteApp" Disabled="@(Deleteable)">Delete</MudButton>
				</MudButtonGroup>
			</div>
		}

	</MudPaper>
</MudItem>


@code {

	private bool toolsopen = false;

	private bool Deleteable { get { return this.App.IsSystemApp; } }

	private bool mouseisover = false;

	internal bool isElevated { get { return Expanded ? true : mouseisover; } }

	internal bool ShowIcon { get { return !Expanded; } }

	internal bool ShowContent { get { return Expanded; } }

	void MouseEntered(EventArgs e)
	{
		mouseisover = true;
		StateHasChanged();
	}

	void MouseLeft(EventArgs e)
	{
		mouseisover = false;
		StateHasChanged();
	}

	public void ToggleTools()
	{
		toolsopen = !toolsopen;
	}

	private bool _expanded = false;

	[Parameter]
	public HpApp App { get; set; }

	[Parameter]
	public bool Expanded { get { return _expanded; } set { _expanded = value; mouseisover = _expanded; if (!_expanded) toolsopen = false; StateHasChanged(); } }

	[Parameter]
	public EventCallback<string> OnAppExpanded { get; set; }

	[Parameter]
	public EventCallback<(string App, string function)> ToolCallback { get; set; }

	[Parameter]
	public EventCallback<MouseEventArgs> OnClick { get; set; }

	protected async void OnClickHandler()
	{
		await OnAppExpanded.InvokeAsync(App.Name);
		StateHasChanged();
	}

	protected async void ToolingHandler(string feature)
	{
		//await StartProgrammingIDE.InvokeAsync((App.Name, ppl ? "PPL" : "Python"));
		toolsopen = false;
		await ToolCallback.InvokeAsync((App.Name, feature));
	}

	private void DeleteApp()
	{
		Console.WriteLine($"Request to delete {this.App.Name}!");
	}

}
