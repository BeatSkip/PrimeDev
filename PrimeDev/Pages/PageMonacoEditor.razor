@inject PrimePythonIdeService pyserverice
@inject IResizeListener listener

<MonacoEditor @ref="_editor" Id="ide-anim" ConstructionOptions="EditorConstructionOptions" OnDidInit="EditorOnDidInit" OnContextMenu="OnContextMenu" OnDidChangeModelContent="OnContentSizeChanged"  />




@code {

	//<MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" Class="fab-bottom-right right-drawer-size-bigger">
	//<MudButton StartIcon="@Icons.Material.Filled.Upload">Save and Upload</MudButton>
	//<MudButton StartIcon="@Icons.Material.Filled.Clear" IconColor="Color.Warning" OnClick="(async () => await Testfeature())">Test</MudButton>
	//</MudButtonGroup>

	[Inject] IJSRuntime _jsRuntime { get; set; }

	#region Monaco Editor
	private MonacoEditor _editor { get; set; }
	private string ValueToSet { get; set; }

	private int editcounter = 0;

	private async Task Testfeature()
	{
		var mod = await this._editor.GetModel();

	}

	private QuickSuggestionsOptions MonacoPythonSuggestionOptions()
	{

		return new QuickSuggestionsOptions
			{
				Comments = true,
				Other = true,
				Strings = true,

			};

	}

	private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
	{
		return new StandaloneEditorConstructionOptions
			{
				Language = "python",
				GlyphMargin = true,
				Value = "",
			};
	}

	private async Task EditorOnDidInit(MonacoEditorBase editor)
	{
		await _editor.AddCommand((int)KeyMode.CtrlCmd | (int)KeyCode.KEY_H, (editor, keyCode) =>
		{
			Console.WriteLine("Ctrl+H : Initial editor command is triggered.");
		});

		var newDecorations = new ModelDeltaDecoration[]
		{
			new ModelDeltaDecoration
			{
				Range = new BlazorMonaco.Range(3,1,3,1),
				Options = new ModelDecorationOptions
				{
					IsWholeLine = true,
					ClassName = "decorationContentClass",
					GlyphMarginClassName = "decorationGlyphMarginClass"
				}
			}
		};

		decorationIds = await _editor.DeltaDecorations(null, newDecorations);
		// You can now use 'decorationIds' to change or remove the decorations
		pyserverice.FileSelectedForEdit += Pyserverice_FileSelectedForEdit;

		await this.SetValue(this.pyserverice.AppFiles[this.pyserverice.SelectedFile].filecontent);
	}

	private string[] decorationIds;

	private void OnContextMenu(EditorMouseEvent eventArg)
	{
		Console.WriteLine("OnContextMenu : " + System.Text.Json.JsonSerializer.Serialize(eventArg));
	}

	private async Task ChangeTheme(ChangeEventArgs e)
	{
		Console.WriteLine($"setting theme to: {e.Value.ToString()}");
		await MonacoEditor.SetTheme(e.Value.ToString());
	}

	private async Task SetValue()
	{
		await _editor.SetValue(ValueToSet);
		editcounter = 0;
	}

	private async Task SetValue(string value)
	{
		await _editor.SetValue(value);
		editcounter = 0;
	}


	private async Task GetValue()
	{
		var val = await _editor.GetValue();
		Console.WriteLine($"value is: {val}");
	}

	private async Task AddCommand()
	{
		await _editor.AddCommand((int)KeyMode.CtrlCmd | (int)KeyCode.Enter, (editor, keyCode) =>
		{
			Console.WriteLine("Ctrl+Enter : Editor command is triggered.");
		});
	}

	private async Task AddAction()
	{
		await _editor.AddAction("testAction", "Test Action", new int[] { (int)KeyMode.CtrlCmd | (int)KeyCode.KEY_D, (int)KeyMode.CtrlCmd | (int)KeyCode.KEY_B }, null, null, "navigation", 1.5, (editor, keyCodes) =>
		{
			Console.WriteLine("Ctrl+D : Editor action is triggered.");
		});
	}

	private async Task CreateModelFromFile()
	{
		var model = await _editor.GetModel();

	}

	#endregion

	

}
